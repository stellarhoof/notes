{"version":3,"file":"index.eede5dd0.js","sources":["../../vite/modulepreload-polyfill","../../src/renderTemplate.js","../../src/App.jsx","../../src/model.js","../../src/index.jsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import _ from \"lodash/fp\"\nimport f from \"futil\"\nimport { isAbsolute, dirname, join } from \"path-browserify\"\n\nlet tokens = {\n  template: Symbol(\"template\"),\n  field: Symbol(\"field\"),\n}\n\nlet tokenType = (token) =>\n  token.startsWith(\"{{#\") ? tokens.template : tokens.field\n\nlet replaceTokens = (replacers) =>\n  _.replace(/{{#?\\s*([\\w\\/:]+)\\s*}}/g, (token, value) =>\n    _.getOr(_.constant(token), tokenType(token), replacers)(value, token),\n  )\n\nlet makeFieldToken = (paths) => `{{${paths.join(\":\")}}}`\n\nlet makeTemplateToken = (path) => `{{#${path}}}`\n\nexport let expandTemplate = (templates) => {\n  let paths = []\n\n  let resolvePath = (value = \"\") =>\n    isAbsolute(value) ? value : join(dirname(_.last(paths) || \"/\"), value)\n\n  let replacers = {\n    [tokens.field]: (path) => makeFieldToken([...paths, resolvePath(path)]),\n    [tokens.template]: (path, token) => {\n      let absolute = resolvePath(path)\n      paths.push(absolute)\n      let result = replaceTokens(replacers)(templates[absolute])\n      paths.pop()\n      return result || makeTemplateToken(absolute)\n    },\n  }\n\n  return replaceTokens(replacers)\n}\n\nexport let addFieldsCounts = (counts = {}) =>\n  replaceTokens({\n    [tokens.field]: (path) => {\n      counts[path] = _.add(counts[path], 1)\n      return makeFieldToken([path, counts[path]])\n    },\n  })\n\nexport let getFieldPath = _.flow(_.split(\":\"), _.nth(-2))\n\nexport let highlightTokens = (templates, fields) =>\n  replaceTokens({\n    [tokens.field]: (path, token) => {\n      let fieldPath = getFieldPath(path)\n      let exists = _.has(fieldPath, fields)\n      let href = exists ? \"href\" : \"\"\n      return `<a ${href} data-exists=${exists} data-path=${path}>${token}</a>`\n    },\n    [tokens.template]: (path, token) => {\n      let exists = _.has(path, templates)\n      let href = exists ? \"href\" : \"\"\n      return `<a ${href} data-exists=${exists} data-path=${path}>${token}</a>`\n    },\n  })\n\nexport let processTemplate = (templates, fields) =>\n  _.flow(\n    expandTemplate(templates),\n    addFieldsCounts(),\n    highlightTokens(templates, fields),\n  )\n\nlet foo = new Intl.ListFormat(\"en\", { style: \"long\", type: \"conjunction\" })\n\nexport let renderTemplate = (values) =>\n  replaceTokens({\n    [tokens.field]: (path, token) => {\n      let value = values.get(path)\n      if (!_.isEmpty(value)) return _.isArray(value) ? foo.format(value) : value\n      return token\n    },\n  })\n","import _ from \"lodash/fp\"\nimport path from \"path-browserify\"\nimport { observer } from \"mobx-react-lite\"\nimport { directoryOpen } from \"browser-fs-access\"\nimport {\n  Flex,\n  Box,\n  Button,\n  Code,\n  Stack,\n  Radio,\n  RadioGroup,\n  Checkbox,\n  CheckboxGroup,\n} from \"@chakra-ui/react\"\nimport { getFieldPath, processTemplate, renderTemplate } from \"./renderTemplate\"\n\nlet getFiles = async () => {\n  let result = { templates: {}, fields: {} }\n  let utf8decoder = new TextDecoder()\n  for (let file of await directoryOpen({ recursive: true })) {\n    let match = _.head(file.name.match(\"(field|template)$\"))\n    if (match) {\n      let key = file.webkitRelativePath.replace(\n        /\\w+(.*)\\.(field|template)$/,\n        (_, path) => path,\n      )\n      result[`${match}s`][key] = utf8decoder.decode(await file.arrayBuffer())\n    }\n  }\n  return result\n}\n\nlet parseField = (text) => {\n  let [type, ...options] = _.map((x) => _.trim(x, \"\\n\"), _.split(\"\\n-\\n\", text))\n  return { type, options }\n}\n\nlet ValuePicker = ({ field, type, options, ...props }) =>\n  type === \"exclusive\" ? (\n    <RadioGroup size=\"sm\" {...props}>\n      <Stack>\n        {_.map(\n          (option) => (\n            <Radio key={option} value={option}>\n              {option}\n            </Radio>\n          ),\n          options,\n        )}\n      </Stack>\n    </RadioGroup>\n  ) : (\n    <CheckboxGroup size=\"sm\" {...props}>\n      <Stack>\n        {_.map(\n          (option) => (\n            <Checkbox key={option} value={option}>\n              {option}\n            </Checkbox>\n          ),\n          options,\n        )}\n      </Stack>\n    </CheckboxGroup>\n  )\n\nlet App = ({ store }) => (\n  <Flex\n    w=\"100vw\"\n    h=\"100vh\"\n    fontFamily=\"monospace\"\n    sx={{\n      \"> *:not(hr)\": { flex: 1, p: 3, h: \"100%\", overflow: \"scroll\" },\n      a: {\n        bg: \"yellow.100\",\n        boxShadow: \"0 1px 2px 0px #ECC94B\",\n        \"&[data-exists=true]\": {\n          cursor: \"pointer\",\n          \":hover\": { bg: \"yellow.200\" },\n        },\n        \"&[data-exists=false]\": {\n          bg: \"red.100\",\n          boxShadow: \"0 1px 2px 0px #FC8181\",\n        },\n        [`&[data-path=\"${store.field}\"]`]: {\n          bg: \"green.100\",\n          border: \"10px black\",\n          boxShadow: \"0 1px 2px 0px #48BB78\",\n          \":hover\": { bg: \"green.200\" },\n        },\n      },\n    }}\n  >\n    <Code\n      whiteSpace=\"pre-wrap\"\n      dangerouslySetInnerHTML={{\n        __html: renderTemplate(store.data)(store.template),\n      }}\n      onClick={(e) =>\n        e.target.tagName === \"A\" &&\n        e.target.dataset[\"exists\"] === \"true\" &&\n        (store.field = e.target.dataset[\"path\"])\n      }\n    />\n    <Stack>\n      <Button\n        size=\"sm\"\n        onClick={async () => {\n          let { fields, templates } = await getFiles()\n          store.templates = templates\n          store.fields = fields\n          store.template = processTemplate(templates, fields)(\"{{#nota}}\")\n        }}\n      >\n        Reload files\n      </Button>\n      <ValuePicker\n        key={store.field}\n        value={store.data.get(store.field)}\n        onChange={(x) => store.data.set(store.field, x)}\n        {...parseField(_.get(getFieldPath(store.field), store.fields))}\n      />\n    </Stack>\n  </Flex>\n)\n\nexport default observer(App)\n","import _ from \"lodash/fp\"\nimport { types } from \"mobx-state-tree\"\n\nexport default types.model({\n  data: types.map(types.union(types.string, types.array(types.string))),\n  template: types.maybe(types.string),\n  field: types.maybe(types.string),\n  templates: types.maybe(types.frozen(types.map(types.string))),\n  fields: types.maybe(types.frozen(types.map(types.string))),\n})\n","import _ from \"lodash/fp\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\"\nimport { onSnapshot, getSnapshot, unprotect } from \"mobx-state-tree\"\nimport App from \"./App\"\nimport model from \"./model\"\n\nlet storage = window.localStorage\n\nlet store = model.create(JSON.parse(storage.getItem(\"store\")) || undefined)\n\nunprotect(store)\n\nonSnapshot(store, (x) => storage.setItem(\"store\", JSON.stringify(x)))\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App store={store} />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n"],"names":["_","isAbsolute","join","dirname","getFiles","result","templates","fields","utf8decoder","TextDecoder","file","directoryOpen","recursive","match","head","name","key","webkitRelativePath","replace","path","decode","arrayBuffer","parseField","text","type","options","map","x","trim","split","ValuePicker","field","props","option","App","store","flex","p","h","overflow","a","bg","boxShadow","cursor","border","__html","renderTemplate","data","template","e","target","tagName","dataset","processTemplate","get","set","getFieldPath","observer","storage","window","localStorage","model","create","JSON","parse","getItem","undefined","unprotect","onSnapshot","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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"}